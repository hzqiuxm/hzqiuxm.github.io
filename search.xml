<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[行为经济学]]></title>
      <url>http://hzqiuxm.github.io/2016/11/08/liurun004/</url>
      <content type="html"><![CDATA[<h2 id="行为经济学"><a href="#行为经济学" class="headerlink" title="行为经济学"></a>行为经济学</h2><h3 id="抓住老鼠的是好猫？"><a href="#抓住老鼠的是好猫？" class="headerlink" title="抓住老鼠的是好猫？"></a>抓住老鼠的是好猫？</h3><a id="more"></a>
<ul>
<li><p>概念：<strong>结果偏见</strong><br>我们看到一个人成功，就会立刻认为他过去行为都是有道理的，可成功者自认为的那个经验，也很有可能是他没有获得更大成功的绊脚石</p>
<blockquote>
<p>案例：A和B销售业绩对比，好的一方是因为方法得当还是运气好要分辨清楚</p>
</blockquote>
</li>
<li><p>运用：如何避免？</p>
<p>1 归纳演绎法 （谷歌成功是因为招了优秀的人才？但刚创立的时候优秀人才多吗？）<br>2 用三个问题武装自己： </p>
<blockquote>
<p>这个结果真的有可控原因吗？<br>  他真的知道认为可控原因是什么吗？<br>  他引以为豪的是宝玉还是瑕疵？</p>
</blockquote>
</li>
<li><p>小结：避免偏见两个方法</p>
<p>1 归纳之后演绎<br>2 学前3问</p>
</li>
</ul>
<h3 id="为什么我们喜新厌旧？"><a href="#为什么我们喜新厌旧？" class="headerlink" title="为什么我们喜新厌旧？"></a>为什么我们喜新厌旧？</h3><ul>
<li><p>概念：<strong>适应性偏见</strong><br>我们对好的，坏的环境最终都能适应的强大行为心里</p>
<blockquote>
<p>案例：入兰芷之室，久而不闻其香；入鲍鱼之肆，久而不闻其臭</p>
<pre><code>表现出色的员工发奖金还是涨工资？
正确的是发奖金，工资是支付给责任的，奖金是支付给业绩的
</code></pre></blockquote>
</li>
<li><p>运用：一个心法，三个方法</p>
<p>心法：打破别人和自己的适应性<br>方法：延迟幸福感（分次购买喜欢的东西），意外幸福感（年终红包），对比幸福感（360开机）</p>
</li>
<li><p>小结：如何运用？</p>
<p>1 阶段性给予<br>2 提供不确定刺激<br>3 善于对比</p>
</li>
</ul>
<h3 id="为什么妈妈们喜欢在朋友圈晒娃？"><a href="#为什么妈妈们喜欢在朋友圈晒娃？" class="headerlink" title="为什么妈妈们喜欢在朋友圈晒娃？"></a>为什么妈妈们喜欢在朋友圈晒娃？</h3><ul>
<li><p>概念：<strong>鸡蛋理论</strong><br>对于一个物品我们付出的劳动或者情感越多，就越容易高估该物品的价值,付出的劳动越多，产生的依恋就越深</p>
<blockquote>
<p>案例：蛋糕粉销售难题，原因是配方太全，太太们没有亲手参与的可能，讲配方中一些材料除去，提供亲手做的机会,使销量获得了快速的增长</p>
</blockquote>
</li>
<li><p>运用：两个方法</p>
<p>1.让用户有参与感：小米MIUI功能体验与设计让用户参与，苹果iPad激光镌刻<br>2.让用户付出劳动：各种DIY店</p>
</li>
<li><p>小结：如何运用？</p>
<p>1 让用户参与感，投票，搭配<br>2 让用户付出劳动，留30%工作让用户自己做，商品就能在他心中镀上光环</p>
</li>
</ul>
<p>###全世界一半娃都丑到了平均水平以下</p>
<ul>
<li><p>概念：<strong>概率偏见</strong><br>心理概率与客观概率的不吻合现象</p>
<blockquote>
<p>案例：三门概率问题</p>
</blockquote>
</li>
<li><p>归纳：三个原因</p>
<ol>
<li>以偏概全 ：黑天鹅，小概率</li>
<li>眼见为实：飞机失事</li>
<li>先入为主：男人都不是好东西</li>
</ol>
</li>
<li><p>小结：如何做出正确的商业决策？</p>
<p>1 学好数学，尤其是概率与统计<br>2 不要过分相信自己的主观直接，多听取领域专家建议，对冲自己先入为主</p>
</li>
</ul>
<p>###不买最好，只买最贵</p>
<ul>
<li><p>概念：<strong>凡勃伦效应</strong><br>消费者购买某些商品的目的不仅仅满足物质性需求，更大程度上为了获得心理上的满足,属于炫耀性消费</p>
<blockquote>
<p>案例：高端服装连锁品牌降价无人购买，提价反而销量递增</p>
</blockquote>
</li>
<li><p>运用：如何有效提高市场份额？</p>
<ol>
<li>贵不是目的，能炫耀才是</li>
<li>穷人也有炫耀需求：换个字就叫装，比如朋友圈晒书单，千万记住：帮他装，不要揭穿</li>
<li>用好不买最好，只买最贵（看病，家装等）</li>
</ol>
</li>
<li><p>小结：凡勃仑效应本质</p>
<p>炫耀性消费心理导致<br>注意贵不是目的，能让消费者恰到好处地炫耀，不漏声色地装，是核心</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[互联网基本定律]]></title>
      <url>http://hzqiuxm.github.io/2016/11/08/liurun003/</url>
      <content type="html"><![CDATA[<h2 id="互联网基本定律"><a href="#互联网基本定律" class="headerlink" title="互联网基本定律"></a>互联网基本定律</h2><h3 id="在美国，你会吃麦当劳吗？"><a href="#在美国，你会吃麦当劳吗？" class="headerlink" title="在美国，你会吃麦当劳吗？"></a>在美国，你会吃麦当劳吗？</h3><a id="more"></a>
<ul>
<li><p>概念：<strong>信息对称</strong><br>要实现有效的交易，交易双方掌握的信息必须对称，否则信息越多越有利</p>
<blockquote>
<p>案例：在麦当劳和一家没有吃过的牛排店之间，可能选择麦当劳的会更多，因为口味之前是知道的</p>
</blockquote>
</li>
<li><p>运用<br>新创品牌如何获得市场认可？<br>引入用户评价体系</p>
</li>
<li><p>小结：怎么解决信息不对称</p>
<p>信息对称是互联网改变商业世界的底层逻辑</p>
</li>
</ul>
<h3 id="互联网与生俱来的洪荒之力"><a href="#互联网与生俱来的洪荒之力" class="headerlink" title="互联网与生俱来的洪荒之力"></a>互联网与生俱来的洪荒之力</h3><ul>
<li>概念：<strong>网络效应</strong><br>某种产品对一名用户的使用价值，取决于使用这个产品的其他用户的数量（用户越多，越有价值）</li>
</ul>
<blockquote>
<p>案例：微信，手机，电话，传真机……几乎所有的互联网社交型工具</p>
</blockquote>
<ul>
<li><p>运用</p>
<p>比如做一个旅行工具的app，当竞争对手出现时，要加入拼车，聊天等社交功能，让离开你app需要一定的成本才行，为留存用户提供了一个重要的时间窗口<br>线下女装品牌店：和附近的美容店，理发店，健身房建立起联盟<br>航空公司：国航，深航加入星空联盟，东航、南航家兔天合联盟</p>
</li>
<li><p>小结：如何利用网络效应创业？</p>
<p>注意赢家通吃的特点<br>先下手为强</p>
</li>
</ul>
<h3 id="理论上，你可以服务全人类"><a href="#理论上，你可以服务全人类" class="headerlink" title="理论上，你可以服务全人类"></a>理论上，你可以服务全人类</h3><ul>
<li><p>概念：<strong>边际成本</strong><br>每多生产或卖一件产品，所带来的总成本的增加，利用互联网降低边际成本</p>
<blockquote>
<p>案例：苏宁VS京东，电报VS短信VS微信</p>
</blockquote>
</li>
<li><p>运用</p>
<p>Uber VS传统的出租车<br>AirbnbVS传统酒店<br>线上教育VS线下教育</p>
</li>
<li><p>小结：如何利用这个结构性冲击，成就生意</p>
<p>互联网用户规模理论上无上限，边际成本就无限接近于0，有可能的话你就通过极大降低边际成本，挑战传统经营模式</p>
</li>
</ul>
<h4 id="商业的未来是小众市场"><a href="#商业的未来是小众市场" class="headerlink" title="商业的未来是小众市场"></a>商业的未来是小众市场</h4><ul>
<li><p>概念：<strong>长尾理论</strong><br>互联网的出现，使得企业规模化地满足人们个性需求成为了一种可能<br>将所有的个性化需求集中起来也是一个很大的市场</p>
<blockquote>
<p>案例：楼下修理铺VS万能的淘宝，传统广告VS互联网广告  </p>
</blockquote>
</li>
<li><p>运用<br>小众市场也是大市场，爆品战略<br>快速满足个性化需求</p>
</li>
<li><p>小结：如何运用<br>长尾理论成立的前提：边际成本很低、小需求被收集、个性化被规模满足<br>建议的方法：1借助大平台，做小众爆品 2借助多图案多，做快速个性</p>
</li>
</ul>
<h3 id="所有的免费，都是二段收费"><a href="#所有的免费，都是二段收费" class="headerlink" title="所有的免费，都是二段收费"></a>所有的免费，都是二段收费</h3><ul>
<li><p>概念：<strong>免费</strong><br>其实没有真正的免费，所有的免费都是二段收费</p>
<blockquote>
<p>案例：游戏的发展史：一次性–》点卡–》道具</p>
</blockquote>
</li>
<li><p>运用</p>
<p>1.交叉补贴：此免费彼收费<br>2.先免后收：地端产品免费，高端产品收费<br>3.三方市场：你对甲免费，收乙的钱，乙从甲那里收费</p>
</li>
<li><p>小结：如何运用？</p>
<p>免费的实质就是将产品的成本进行转移</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[你适合你的职业吗]]></title>
      <url>http://hzqiuxm.github.io/2016/11/07/%E4%BD%A0%E9%80%82%E5%90%88%E4%BD%A0%E7%9A%84%E8%81%8C%E4%B8%9A%E5%90%97/</url>
      <content type="html"><![CDATA[<h1 id="你适合你的职业吗？"><a href="#你适合你的职业吗？" class="headerlink" title="你适合你的职业吗？"></a>你适合你的职业吗？</h1><p>如果你的工作让你焦虑，没有成就感，你可能需要重新认识你和职业的关系了……<br><a id="more"></a></p>
<h2 id="明尼苏达工作适应论"><a href="#明尼苏达工作适应论" class="headerlink" title="明尼苏达工作适应论"></a>明尼苏达工作适应论</h2><p>这个理论把职业分成了四个要素：</p>
<h3 id="个人能力"><a href="#个人能力" class="headerlink" title="个人能力"></a>个人能力</h3><p>包含了你个人的能力、学历、资源等</p>
<h3 id="个人需求"><a href="#个人需求" class="headerlink" title="个人需求"></a>个人需求</h3><p>你工作的具体需求是哪些？经济、成长、成就感、个人实现等</p>
<h3 id="职业要求"><a href="#职业要求" class="headerlink" title="职业要求"></a>职业要求</h3><p>工作对你的要求有哪些？完成的结果、绩效目标、任务指标等</p>
<h3 id="职业回馈"><a href="#职业回馈" class="headerlink" title="职业回馈"></a>职业回馈</h3><p>工作带给你的报酬有哪些？钱、荣誉、人脉等</p>
<p>这四个要素构成了上下两条平行线，如果一个人的能力跟他的职位总是很匹配的话，他的绩效比较高、打分好、等级高…….这就意味着组织对他很满意，简单意义上就是比较成功。如果一个人总是很满意组织给他的回馈，他有所成长、收入高、氛围好……他就会比较幸福。</p>
<p>从个人来说，适合的工作肯定是又成功又幸福的。</p>
<p>对于企业来说，一个适合的职业是这个员工能干好，也是他想干的。</p>
<p><img src="http://7xsh7v.com2.z0.glb.qiniucdn.com/%E8%81%8C%E4%B8%9A%E5%8F%91%E5%B1%95%E6%A8%A1%E5%9E%8B.png" alt="四要素模型图"></p>
<h2 id="正确评估自己职业适合度"><a href="#正确评估自己职业适合度" class="headerlink" title="正确评估自己职业适合度"></a>正确评估自己职业适合度</h2><h3 id="什么是工作？"><a href="#什么是工作？" class="headerlink" title="什么是工作？"></a>什么是工作？</h3><p><strong>工作就是持续地满足他人需求而自我实现的社会交换</strong></p>
<h3 id="自我诊断"><a href="#自我诊断" class="headerlink" title="自我诊断"></a>自我诊断</h3><p>1 在现在的工作中，你最迫切需要提升的是自己的成功度，还是幸福度？你是干不好，还是不想干？</p>
<p>2 如果是干不好，那么提升的地方就在<strong>企业需求</strong>和<strong>个人能力</strong>的匹配度上，想想自己是不是真的理解组织的需求了？应该怎么提升自己的能力，达到组织要求？</p>
<p>3 如果是不想干，提升点则是在<strong>个人需求</strong>和<strong>职业收益</strong>的匹配度上；想想我是不是知道自己想要什么？职业有时候能给你想要的，有时候也给不了你想要的。一方面是大部分时候公司不知道你想要什么，另一方面不是所有公司都能给每个人所想要的。如果知道自己想要的，且公司能给，那需要什么能力才能获得这个收益呢？</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>该模型虽然简单，但是它透漏出来了职业的一个底层逻辑：<strong>等价交换</strong><br>正因为职业是通过持续地满足对方需求自我实现的过程，也就是持续的等价交换，所以交易双方最好的状态，自然就是<strong>匹配</strong></p>
<p>太牛的人去小公司不一定好，太强的人去大公司也不一定合适，你们互相匹配才是最重要的。好姑娘难追，好工作难找，都是一个道理。值得去的地方，值得拥有的东西永无捷径！</p>
<h2 id="金句赏析"><a href="#金句赏析" class="headerlink" title="金句赏析"></a>金句赏析</h2><p><strong>最好的企业应该是企业和员工一起成长，互相匹配，动态匹配，动态成长</strong></p>
<p><strong>人和环境也总是在动态匹配，共同成长的</strong></p>
<p><strong>一个人对外部的要求越高，就相当于证明了自己的能力越差</strong></p>
<p><strong>抱怨是一种无能的贪念，是你最应该戒掉的恶习</strong></p>
<p><strong>抱怨的害处，不仅仅在于浪费时间，也不仅仅在于会暴露你自己的无能；它真正的害处是让你不由自主的放弃挣扎，走向灭亡</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[《未来简史》读后感]]></title>
      <url>http://hzqiuxm.github.io/2016/11/02/weilaijianshi/</url>
      <content type="html"><![CDATA[<p>《人类简史》作者赫拉利的新作，英国版在2016年9月份出版，美国版将在2017年出版，中文版至少一年以后<br><a id="more"></a></p>
<h2 id="未来简史专题"><a href="#未来简史专题" class="headerlink" title="未来简史专题"></a>未来简史专题</h2><p>《人类简史》作者赫拉利的新作，英国版在2016年9月份出版，美国版将在2017年出版，中文版至少一年以后</p>
<!--more-->
<p>我们需要一位像赫拉利这样通才式的学者，才能把一切综合起来，让我们对现代世界有点深入的见识</p>
<h3 id="本书主旨"><a href="#本书主旨" class="headerlink" title="本书主旨"></a>本书主旨</h3><ul>
<li>推动社会变革的不是我们对真实现实的认识，而是我们头脑中虚构的现实，也就是宗教的力量</li>
<li>人文主义就是现代世界的宗教</li>
<li>科学与人文主义有一个交易，使得我们现在对人文主义的信念越来越强，而且要根据这个信念去改造世界和自己</li>
<li>人文主义有个本质的缺陷</li>
</ul>
<h3 id="学历史的作用是让我们更自由"><a href="#学历史的作用是让我们更自由" class="headerlink" title="学历史的作用是让我们更自由"></a>学历史的作用是让我们更自由</h3><ul>
<li>历史上的很多事只是偶然</li>
<li>历史不是告诉我们该往哪里走，而是告诉我们你可以想象多种不同的可能性，让历史忘不一样的方向走</li>
<li>智人的问题基本已经解决了（饥饿，瘟疫，战争）</li>
<li>现在我们想当神人<pre><code>&gt; 追求获得永生
    追求幸福
    直接成神
</code></pre></li>
<li>学历史最大好处是解放自己，想象不同的命运</li>
</ul>
<h3 id="我有意识？它有吗？"><a href="#我有意识？它有吗？" class="headerlink" title="我有意识？它有吗？"></a>我有意识？它有吗？</h3><ul>
<li>农业社会神是第一宝贵的，人排第二</li>
<li>没人理解意识</li>
<li>讨论意识并不能证明人高贵</li>
<li>虚构的力量</li>
<li>历史学家最关心的就是每一个时期，人们共同想象，虚构出来的故事是什么</li>
</ul>
<h3 id="活在虚构之中"><a href="#活在虚构之中" class="headerlink" title="活在虚构之中"></a>活在虚构之中</h3><ul>
<li>虚构的强大力量，不在于它距离真实有多近，而在于它能把更多的人有效地组织在一起，促进这些人合作</li>
<li>虚构胜于真实</li>
<li>公司是如此，宗教更是如此</li>
<li>什么是宗教<pre><code>有一套不是人发明的，但是不能被人改变的，必须遵守的
给人们一个许诺
目的是为了巩固自己设想的社会秩序
</code></pre></li>
<li>西方自由主义讲的人权，启示也是宗教</li>
<li>科学与宗教是一对夫妻</li>
<li>显示不可能光靠科学生活</li>
<li>宗教关注的是秩序，科学技术关注的是力量</li>
</ul>
<h3 id="欧美自由主义的史诗"><a href="#欧美自由主义的史诗" class="headerlink" title="欧美自由主义的史诗"></a>欧美自由主义的史诗</h3><ul>
<li>所谓现代性，其实是一个交易，人类放弃神赋予我们生活的意义，去交换科学的力量</li>
<li>人类在上帝已死这个时代真正的应对策略，是人文主义</li>
<li>人文主义倡导我们崇拜人性，用人性取代过去宗教里神的位置，用人的体验，给外部世界制造意义（听从你的内心）</li>
<li>知识 = 体验 *敏感度</li>
<li>人文主义三大派别<pre><code>&gt; 1 自由主义的人文主义（注重个人选择）
   2 社会主义的人文主义 （不能过分强调人）
   3 进化人文主义（极端，精英论）
</code></pre></li>
<li>目前是自由主义完胜<pre><code>&gt; 政治上要听选民，经济上要遵循自由市场，道德上不要伤害别人就好，教育上没有标准答案，艺术上尊重个人审美
</code></pre></li>
<li>自由主义胜出的一个重要因素是技术</li>
</ul>
<h3 id="我到底是谁？"><a href="#我到底是谁？" class="headerlink" title="我到底是谁？"></a>我到底是谁？</h3><ul>
<li>如果我根本没有单一的自我，那投票的是谁？购物的是谁？承担后果的又是谁？</li>
<li>自由意志是一个幻觉，人不能选择自己的欲望（当然你以为你能，通过核磁共振可以发现可以提前知道受试者的意图，通过电极还可以控制你的意图）</li>
<li>你说的是哪个自我？大脑里的意识不只一个，左右脑通过胼胝体连接，如果隔断胼胝体，左右脑会有各自的思维，左脑控制语言，右脑控制形象思维<pre><code>左脑回答长大后想当赛车手，右脑却会控制手写下长大想当制图员
</code></pre></li>
<li>体验和叙事 ：体验自我与叙事自我 <pre><code>&gt;　平时的自我认同属于叙事自我。同样是挨饿，叙事自我如果说是为了体检，体验自我就觉得没关系，叙事自我如果说是因为穷买不起饭，体验自我就会觉得我好惨
</code></pre></li>
</ul>
<p>－没有自由意志或自我，都是幻觉<br>－科学曾证明上帝不靠谱，给了以人为本的自由主义发展机会，现在科学又给了自由主义会心一击</p>
<h3 id="二十一世纪的三种人"><a href="#二十一世纪的三种人" class="headerlink" title="二十一世纪的三种人"></a>二十一世纪的三种人</h3><p>－以后回头再看现在这个自由主义时代，我们会觉得简直就是做了一场好梦<br>－计算机算法比你更了解自己，为了你自己的利益，你应该让算法替你做决定<br>－未来人类的三种命运<br>            ＞１人工智能如此强大，一部分人已完全没了价值<br>                ２也许人类整体还是价值的，但是每个人作为个体，还是有价值的<br>                ３和算法结合在一起成为超人<br>－无用的人<br>        ＞　不像以前技术的发展，会有新工作的产生，人工智能也有新工作，但是不属于普通人<br>                大量白领工作人工智能都将胜过人类：股市交易，普通律师，医疗诊断，手术，药剂师，艺术创造。。。。<br>                工业革命产生了无产阶级，人工智能革命将产生无用阶层</p>
<p>－没有自主的人<br>            ＞　属于较高一级，作为整体有价值，但没有决定权，都听算法的<br>－神人<br>            ＞　控制算法的人，利用生物技术主动升级的人　　<br>－新宗教：数据教和技术人文主义</p>
<h3 id="万物之网"><a href="#万物之网" class="headerlink" title="万物之网"></a>万物之网</h3><p>－数据比人宝贵？没问题<br>－人性知识宇宙数据流中的一个涟漪？非常合理<br>－任何想要成为神人的升级，都可能伴有副作用（注意力提升了，怀疑能力就下降了）<br>－神人升级还可能会选择自己的欲望，去除掉不需要的<br>－赫拉利看好的是数据教<br>－一切都是数据处理：世界一切学科，背后都有数学模式，从数学角度可以把人，动物，公司，国家都想象成一个数据处理系统<br>－大数据思想：生物体就是各种算法集合，经济学就是欲望＋能力做的决策<br>－整个人类的历史，就是给这个系统增加效率的历史<br>－万物互联之时，与其信奉个人，神人，还不如信奉这个网络<br>－数据主义：算法之间互相配合升级，算法产生算法，万物之网独立于人类而存在，这就是新的宗教<br>－数据教价值观：信息本身想要更多的人看到它<br>－数据教戒律：最大化互联，必须上网分享了的体验，才有价值<br>－数据教许诺：你允许信息自由流动，万物之网将造福每一个人</p>
<h3 id="万维钢总结"><a href="#万维钢总结" class="headerlink" title="万维钢总结"></a>万维钢总结</h3><ul>
<li>如果赫拉利是对的，那么 人生根本没有真实的意义，一切意义是幻想出来的</li>
<li>但还是建议继续生活在虚构之中，继续维护我认为有脚趾的想象共同体，继续增加自己体验和敏感度，继续追问自己内心到底想要什么</li>
<li>因为知道活在虚构之中所以：如果想象共同体要求自己牺牲自己或别人的生命去维护它，不干；对某些想法看法不要过于执着，这只是叙事自我的一个简单解读</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle系列六：依赖管理与多项目构建]]></title>
      <url>http://hzqiuxm.github.io/2016/10/31/gradle006/</url>
      <content type="html"><![CDATA[<p>本章为你介绍Gradle的依赖管理原理，仓库配置，多项目<br><a id="more"></a></p>
<h3 id="依赖管理概述"><a href="#依赖管理概述" class="headerlink" title="依赖管理概述"></a>依赖管理概述</h3><p><strong>Gradle摒弃了Ivy和Maven依赖管理工具的一切缺点，更注重性能、构建可靠性以及可重复性</strong></p>
<ul>
<li>通常开发都需要依赖一些流行的开源框架包，避免自己重复发明轮子</li>
<li>随着项目的增大，依赖的模块和第三方类库会越来越多，如何组织与管理就显得尤为重要</li>
<li>自动化依赖管理可以解决传递性依赖，版本管理等问题</li>
<li>搭建内部仓库解决中央仓库的单点依赖 Sonatype Nexus, JFrog, Artifactory</li>
<li>Gradle提供了很有价值的依赖报告</li>
</ul>
<p><strong>一个自动化依赖结构图</strong><br><img src="http://7xsh7v.com1.z0.glb.clouddn.com/13.png" alt="自动化依赖管理"></p>
<h3 id="依赖配置"><a href="#依赖配置" class="headerlink" title="依赖配置"></a>依赖配置</h3><ul>
<li>通过project实例添加和访问配置</li>
<li>每个项目都有一个ConfigurationContainer类的容器来管理相应的配置</li>
<li>定义一个Cargio类配置的例子<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">configurations</span>&#123;</div><div class="line">        cagro &#123;</div><div class="line">            <span class="keyword">description</span> = <span class="string">'classpath for cargo Ant tasks'</span></div><div class="line">            visible = <span class="keyword">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="声明依赖"><a href="#声明依赖" class="headerlink" title="声明依赖"></a>声明依赖</h3><ul>
<li>外部模块依赖</li>
<li>项目依赖</li>
<li>文件依赖</li>
<li>客户端模块依赖</li>
<li>Gradle运行时依赖</li>
</ul>
<p><strong>每个Gradle项目都有依赖处理器实例，由DependencyHandler接口来表示</strong></p>
<h3 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h3><h4 id="依赖属性"><a href="#依赖属性" class="headerlink" title="依赖属性"></a>依赖属性</h4><ul>
<li>group 通常用来标示一个组织，公司或者项目</li>
<li>name  唯一标识</li>
<li>version 版本号 一般都包含主版本和次版本</li>
<li>classifier  用来区分相同group，name，version工件，但使用环境上有所区别</li>
</ul>
<p>例子：<br><img src="http://7xsh7v.com1.z0.glb.clouddn.com/10.png" alt="依赖属性例子"></p>
<h4 id="依赖标记"><a href="#依赖标记" class="headerlink" title="依赖标记"></a>依赖标记</h4><p>有两种标识方式</p>
<ul>
<li><p>使用map结构形式，显示标记出group，name，version</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cargo <span class="string">group:</span> cargoGroup,<span class="string">name:</span><span class="string">' cargo-core-uberjar'</span>, <span class="string">vewrsion:</span> cargoVersion</div></pre></td></tr></table></figure>
</li>
<li><p>使用字符串简写形式，类似上一节Hibernate的例子</p>
</li>
</ul>
<p><strong>使用gradle dependencise 命令来查看详细依赖报告</strong></p>
<h4 id="排除传递依赖"><a href="#排除传递依赖" class="headerlink" title="排除传递依赖"></a>排除传递依赖</h4><p>由于Gradle会自动管理传递依赖，如果你需要可以主动排除一些自动的依赖</p>
<ul>
<li><p>排除一个传递依赖</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span>&#123;</div><div class="line">    cargo(<span class="string">'org.codehaus.cargo:cargo-ant:1.3.1'</span>)&#123;</div><div class="line">        <span class="keyword">exclude</span>(<span class="keyword">group</span>:<span class="string">'xml-apis'</span>, module:<span class="string">'xml-apis'</span>)</div><div class="line">    &#125;</div><div class="line">    cargo <span class="string">'xml-apis:xml-apis:2.0.2'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>排除所有传递依赖</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span>&#123;</div><div class="line">    cargo(<span class="string">'org.codehaus.cargo:cargo-ant:1.3.1'</span>)&#123;</div><div class="line">        transitive = <span class="keyword">false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>Gradle还支持最新版本依赖，又叫动态版本依赖，当然正式环境下还是不要用这个功能了</strong></p>
<p>###文件依赖<br> 适用于从现有Ant或者Maven管理方式转变到Gradle时，或者本地稳定的开发包依赖<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span>&#123;</div><div class="line">    cargo <span class="keyword">fileTree</span>(dir: <span class="string">"lib路径"</span> ，<span class="keyword">include</span>: <span class="string">' *.jar '</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用和配置仓库"><a href="#使用和配置仓库" class="headerlink" title="使用和配置仓库"></a>使用和配置仓库</h3><ul>
<li>定义仓库的接口类 RepositoryHandler</li>
<li>支持Maven仓库，Ivy仓库，扁平的目录仓库</li>
</ul>
<h3 id="Maven仓库"><a href="#Maven仓库" class="headerlink" title="Maven仓库"></a>Maven仓库</h3><ul>
<li>中央仓库 mavenCentral()</li>
<li>本地仓库 mavenLocal()  慎用</li>
<li>自定义仓库 maven() 和mavenRepo()</li>
</ul>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies&#123;</div><div class="line">    mavenCentral()</div><div class="line">    maven&#123;</div><div class="line">        name  <span class="string">'Custom Maven Repository'</span></div><div class="line">        url <span class="string">'http://ziniuxiaozhu.com/nexus/public'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="Ivy仓库"><a href="#Ivy仓库" class="headerlink" title="Ivy仓库"></a>Ivy仓库</h3><ul>
<li>相对Maven来说可以自定义布局</li>
<li>仓库依赖元数据存储在ivy.xml中</li>
</ul>
<p><strong>具体语法可参考官方文档</strong></p>
<h3 id="扁平目录仓库"><a href="#扁平目录仓库" class="headerlink" title="扁平目录仓库"></a>扁平目录仓库</h3><ul>
<li>只有JAR文件，没有元数据</li>
<li>适合经常手动维护项目中的类库，或者项目迁移的时候</li>
<li>声明依赖智能使用name和version这两个属性</li>
</ul>
<p>一个从falt目录仓库取Cargo依赖声明例子:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">repositories&#123;</div><div class="line">    flatDir(<span class="string">dir:</span> <span class="string">" $&#123;System.properties['user.home']&#125;/libs/cargo"</span>, <span class="string">name:</span> <span class="string">'Local libs directory'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies&#123;</div><div class="line">    cargo <span class="string">name :</span> <span class="string">'activetion'</span>, <span class="string">version:</span><span class="string">'1.1'</span></div><div class="line">    catgo <span class="string">name:</span> <span class="string">'ant'</span>, <span class="string">version:</span><span class="string">'1.7.1'</span></div><div class="line">    cargo  <span class="string">':xml-apis:1.3.1'</span>, <span class="string">' : jaxen:1.0-FCS'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="本地依赖缓存"><a href="#本地依赖缓存" class="headerlink" title="本地依赖缓存"></a>本地依赖缓存</h3><ul>
<li>Gradle会缓存从仓库下载的二进制文件，该目录根据不同的版本，路径可能不同</li>
<li>存储依赖来源，当来源发生变化，能够保证构建的可靠</li>
<li>减少到远程仓库的传输</li>
<li>比较本地仓库和远程仓库，减少工件的下载</li>
<li>支持离线模式，在你无法联网时采用本地缓存来构建</li>
</ul>
<h3 id="常见依赖问题"><a href="#常见依赖问题" class="headerlink" title="常见依赖问题"></a>常见依赖问题</h3><p><strong>如果你项目有很多依赖，而且你选择自动解决传递性依赖，那么版本冲突几乎是不可避免的</strong></p>
<ul>
<li><p>应对版本冲突<br>设置当遇到版本冲突时，构建失败</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> configuration<span class="selector-class">.cargo</span><span class="selector-class">.resolutionStrategy</span>&#123;</div><div class="line">    failOnVersionConfilct()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>强制制定一个版本</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> configuration<span class="selector-class">.cargo</span><span class="selector-class">.resolutionStrategy</span>&#123;</div><div class="line">   force <span class="string">' org.codehaus.cargo:cargo:cargo-ant:1.3.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用依赖观察报告</p>
</li>
<li>刷新缓存<blockquote>
<p>可以手动刷新，可以不缓存快照版本的依赖包</p>
</blockquote>
</li>
</ul>
<h3 id="模块化项目构建"><a href="#模块化项目构建" class="headerlink" title="模块化项目构建"></a>模块化项目构建</h3><h4 id="规划号自己项目的模块"><a href="#规划号自己项目的模块" class="headerlink" title="规划号自己项目的模块"></a>规划号自己项目的模块</h4><ul>
<li>根据高内聚低耦合的设计思想，设计符合自己项目的模块</li>
<li>一般会有web层，控制层，服务层，数据层</li>
<li>每个层下面的路径可以自定义，只后在构建文件build.gradle中说明就行<blockquote>
<p>建议采用默认的就行</p>
</blockquote>
</li>
</ul>
<p>大概的结构图如下：<br><img src="http://7xsh7v.com1.z0.glb.clouddn.com/11.png" alt="项目结构示意图"><br>每个模块下都有二个文件： build.gradle 和 setting.gradle</p>
<h3 id="理解setting文件"><a href="#理解setting文件" class="headerlink" title="理解setting文件"></a>理解setting文件</h3><ul>
<li><p>对项目根目录下的setting.gradle文件进行配置多模块项目</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">rootProject.name = <span class="string">'ziniuxiaozhu'</span></div><div class="line"><span class="keyword">include</span> <span class="string">'common'</span></div><div class="line"><span class="keyword">include</span> <span class="string">'service'</span></div><div class="line"><span class="keyword">include</span> <span class="string">'webapp'</span></div></pre></td></tr></table></figure>
</li>
<li><p>setting文件的执行是在初始化阶段<br>回顾下gradle的三个生命周期<br><img src="http://7xsh7v.com1.z0.glb.clouddn.com/12.png" alt="构建生命周期"></p>
</li>
<li><p>初始化的时候先从本模块下的setting文件中寻找，再到根目录下去寻找</p>
<blockquote>
<p>也可以通过命令行参数控制setting搜索行为</p>
</blockquote>
</li>
<li>支持分层布局和扁平布局，当然个人推荐分层的，能够更细粒度控制组件的建模</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle系列五：开始一个WEB应用]]></title>
      <url>http://hzqiuxm.github.io/2016/10/31/gradle005/</url>
      <content type="html"><![CDATA[<p>本章为你简述下，通过Gradle快速开始一个WEB应用<br><a id="more"></a></p>
<h2 id="开始一个WEB应用"><a href="#开始一个WEB应用" class="headerlink" title="开始一个WEB应用"></a>开始一个WEB应用</h2><h3 id="构建WAR文件"><a href="#构建WAR文件" class="headerlink" title="构建WAR文件"></a>构建WAR文件</h3><ul>
<li>使用war插件来构建war文件<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'war'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>当运行 <em>gradle build</em>时就会编译、测试、打包工程一个war文件</p>
<ul>
<li>运行应用插件<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'jetty'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>当你运行 <em>gradle jettyRun</em> 的时候，应用将会运行在一个内嵌的jetty web容器中</p>
<h3 id="gradle的Task执行规则"><a href="#gradle的Task执行规则" class="headerlink" title="gradle的Task执行规则"></a>gradle的Task执行规则</h3><ul>
<li>同个构建可以执行多个task，但每个task只能被执行一次，不管它是在哪个阶段被执行<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> <span class="keyword">compile</span> &lt;&lt; &#123;</div><div class="line">    <span class="keyword">println</span> <span class="string">'compiling source'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> compileTest(dependsOn: <span class="keyword">compile</span>) &lt;&lt; &#123;</div><div class="line">    <span class="keyword">println</span> <span class="string">'compiling unit tests'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> test(dependsOn: [<span class="keyword">compile</span>, compileTest]) &lt;&lt; &#123;</div><div class="line">    <span class="keyword">println</span> <span class="string">'running unit tests'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> dist(dependsOn: [<span class="keyword">compile</span>, test]) &lt;&lt; &#123;</div><div class="line">    <span class="keyword">println</span> <span class="string">'building the distribution'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>执行 <em>gradle dist</em>结果如下<br><img src="http://7xsh7v.com2.z0.glb.clouddn.com/9.png" alt="任务执行规则"></p>
<h3 id="构建块"><a href="#构建块" class="headerlink" title="构建块"></a>构建块</h3><p>注意每个Gradle包含了3个基本构建块：project、task、property</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle系列四:联姻JAVA]]></title>
      <url>http://hzqiuxm.github.io/2016/10/31/gradle004/</url>
      <content type="html"><![CDATA[<p>本章为你简述下，Gradle是如何与Java联姻的<br><a id="more"></a></p>
<h2 id="联姻JVAA"><a href="#联姻JVAA" class="headerlink" title="联姻JVAA"></a>联姻JVAA</h2><h3 id="快速牵手JAVA"><a href="#快速牵手JAVA" class="headerlink" title="快速牵手JAVA"></a>快速牵手JAVA</h3><ul>
<li><p>Gradle将把你从传统的构建流程中解放出来,针对不同的语言它有着各种不同的插件，通过插件封装了基本流程</p>
<blockquote>
<p>![插件与基本流程] (<a href="http://7xsh7v.com2.z0.glb.clouddn.com/6.png" target="_blank" rel="external">http://7xsh7v.com2.z0.glb.clouddn.com/6.png</a>)</p>
</blockquote>
</li>
<li><p>如何使用JAVA插件？只要一行代码</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>这就定义了一个java项目的全部，自动添加很多task<br>Gradle 会在 src/main/java 目录下寻找产品代码，在 src/test/java 寻找测试代码 。<br>另外在 src/main/resources 包含了资源的 JAR 文件, src/test/resources 包含了运行测试。<br>所有的输出都在 build 目录下，JAR 在 build/libs 目录下</p>
<h3 id="外部依赖"><a href="#外部依赖" class="headerlink" title="外部依赖"></a>外部依赖</h3><p> 和Maven一样，我们也可以使用maven repository<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">	mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">        compile <span class="string">group:</span> <span class="string">'org.springframework'</span>, <span class="string">name:</span> <span class="string">'spring-core'</span>, <span class="string">version:</span> <span class="string">'4.2.5.RELEASE'</span></div><div class="line">        compile <span class="string">group:</span> <span class="string">'org.hibernate'</span>, <span class="string">name:</span> <span class="string">'hibernate-core'</span>, <span class="string">version:</span> <span class="string">'3.6.7.Final'</span></div><div class="line">        testCompile <span class="string">group:</span> <span class="string">'junit'</span>, <span class="string">name:</span> <span class="string">'junit'</span>, <span class="string">version:</span> <span class="string">'4.+'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>Maven respository网站上已经提供了各种工具包的依赖，稍微改变下格式描述就可以了<br>（下面将会介绍到Groovy插件，它更强大是java插件的扩展）<br><img src="http://7xsh7v.com2.z0.glb.clouddn.com/7.png" alt="获取依赖"></p>
<p><strong>执行 gradle build </strong><br><img src="http://7xsh7v.com2.z0.glb.clouddn.com/8.png" alt="bulid结果"></p>
<h3 id="一个groovy项目"><a href="#一个groovy项目" class="headerlink" title="一个groovy项目"></a>一个groovy项目</h3><ul>
<li>需要注意的是一个groovy项目也是一个java项目<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'groovy'</span></div><div class="line"></div><div class="line"><span class="keyword">repositories</span> &#123;</div><div class="line">	mavenCentral()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">compile</span> <span class="string">'org.codehaus.groovy:groovy-all:2.3.6'</span></div><div class="line">        <span class="keyword">compile</span> <span class="string">'commons-logging:commons-logging:1.2'</span></div><div class="line">        <span class="keyword">compile</span> <span class="string">'org.springframework:spring-core:4.2.5.RELEASE'</span></div><div class="line">        testCompile <span class="string">'junit:junit:4.11'</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>比之前的java插件更强大哦, 而且依赖的描述也更简单了，从respository中直接copy就行了</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle系列三：脚本基础]]></title>
      <url>http://hzqiuxm.github.io/2016/10/31/gradle003/</url>
      <content type="html"><![CDATA[<p>欢迎来到Gradle系列教材，这一章节讲的是脚本基础相关知识：Groovy ……<br><a id="more"></a></p>
<h2 id="脚本基础"><a href="#脚本基础" class="headerlink" title="脚本基础"></a>脚本基础</h2><h3 id="看看灵活的Groovy例子"><a href="#看看灵活的Groovy例子" class="headerlink" title="看看灵活的Groovy例子"></a>看看灵活的Groovy例子</h3><ul>
<li>编写脚本build.gradle<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> upper &lt;&lt; &#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">'---- Begin in upper ----'</span></div><div class="line">	String strSome = <span class="string">'my_nAme'</span></div><div class="line">	<span class="keyword">println</span> <span class="string">'Original: '</span> + strSome</div><div class="line">	<span class="keyword">println</span> <span class="string">'Upper: '</span> + strSome.toUpperCase()</div><div class="line">	<span class="keyword">println</span> <span class="string">'---- End in upper ----'</span></div><div class="line">&#125;	</div><div class="line"></div><div class="line"><span class="keyword">task</span> hello(dependsOn: upper) &lt;&lt; &#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">" I'm dependsOn upper"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>执行下 gradle -q hello<br><img src="http://7xsh7v.com2.z0.glb.clouddn.com/3.png" alt="执行结果"></p>
<ul>
<li>更多的脚本技巧请参考：<br><a href="http://wiki.jikexueyuan.com/project/gradle-2-user-guide/build-script-basics.html" target="_blank" rel="external">极客学员Grade2用户指南</a></li>
</ul>
<h3 id="默认task设置"><a href="#默认task设置" class="headerlink" title="默认task设置"></a>默认task设置</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">defaultTasks <span class="string">'clean'</span>, <span class="string">'run'</span></div><div class="line"></div><div class="line"><span class="keyword">task</span> upper &lt;&lt; &#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">'---- Begin in upper ----'</span></div><div class="line">	String strSome = <span class="string">'my_nAme'</span></div><div class="line">	<span class="keyword">println</span> <span class="string">'Original: '</span> + strSome</div><div class="line">	<span class="keyword">println</span> <span class="string">'Upper: '</span> + strSome.toUpperCase()</div><div class="line">	<span class="keyword">println</span> <span class="string">'---- End in upper ----'</span></div><div class="line">&#125;	</div><div class="line"></div><div class="line"><span class="keyword">task</span> hello(dependsOn: upper) &lt;&lt; &#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">" I'm dependsOn upper"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> clean &lt;&lt; &#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">'This is a default task clean '</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">task</span> run &lt;&lt; &#123;</div><div class="line">	<span class="keyword">println</span> <span class="string">'This is a default task run '</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>执行 gradle -q 结果</strong><br><img src="http://7xsh7v.com2.z0.glb.clouddn.com/4.png" alt="执行结果"></p>
<h3 id="DAG配置"><a href="#DAG配置" class="headerlink" title="DAG配置"></a>DAG配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">task</span> destribution &lt;&lt;&#123;</div><div class="line">	<span class="attribute">println</span> <span class="string">"We build the zip with version = <span class="variable">$version</span> "</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">task release(dependsOn:<span class="string">'destribution'</span>) &lt;&lt; &#123;</div><div class="line">	<span class="attribute">println</span> <span class="string">'We release now ......'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">gradle.taskGraph.whenReady&#123;</div><div class="line">	<span class="attribute">taskGraph</span> -&gt; </div><div class="line">	if (taskGraph.hasTask(release)) &#123;</div><div class="line">		<span class="attribute">version</span> = <span class="string">'1.0'</span></div><div class="line">	&#125;else&#123;</div><div class="line">		<span class="attribute">version</span> = <span class="string">'1.0-SNAPSHOT'</span></div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>注意执行不同的TASK，输出结果是不一样的</strong><br> <img src="http://7xsh7v.com2.z0.glb.clouddn.com/5.png" alt="执行结果"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle系列二：入门与安装]]></title>
      <url>http://hzqiuxm.github.io/2016/10/31/gradle002/</url>
      <content type="html"><![CDATA[<p>通过这一章节，你讲学会如何安装Gradle以及简单的任务构建与操作<br><a id="more"></a></p>
<h2 id="入门与安装"><a href="#入门与安装" class="headerlink" title="入门与安装"></a>入门与安装</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul>
<li>官方下载地址: <a href="https://gradle.org/gradle-download/" target="_blank" rel="external">https://gradle.org/gradle-download/</a></li>
<li>安装就是配置环境变量，增加GRADLE_HOME环境变量，值为gradle-2.12\bin所在目录<blockquote>
<p>windows下直接在环境变量对话框中定义，类linux系统</p>
<pre><code>export GRADE_HOME = xxxx/xxxx    
export PATH=$PATH:$GRADLE_HOME/bin
</code></pre></blockquote>
</li>
<li>验证是否安装成功<br><img src="http://7xsh7v.com2.z0.glb.clouddn.com/1.png" alt="check install"></li>
<li><p>来一个gradle的hello world<br><strong>新建一个文件 build.gradle</strong></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">task</span> helloWorld&#123;</div><div class="line"></div><div class="line">	<span class="keyword">task</span> startSession &lt;&lt; &#123;</div><div class="line">		<span class="keyword">println</span> <span class="string">'Welcome to gradle world!'</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="number">3</span>.<span class="keyword">times</span> &#123;</div><div class="line">		<span class="keyword">task</span> <span class="string">"genGradle$it"</span> &lt;&lt; &#123;</div><div class="line">			<span class="keyword">println</span> <span class="string">'genGradle rocks'</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">		</div><div class="line">	genGradle0.dependsOn startSession</div><div class="line">	genGradle2.dependsOn genGradle1, genGradle0</div><div class="line">	</div><div class="line">	<span class="keyword">task</span> groupGradles(dependsOn: genGradle2)</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>执行：gradle -q groupGradles<br><img src="http://7xsh7v.com2.z0.glb.clouddn.com/2.png" alt="run helloworld"></p>
</li>
</ul>
<h3 id="程序简单说明"><a href="#程序简单说明" class="headerlink" title="程序简单说明"></a>程序简单说明</h3><ul>
<li>这里的task和Ant的targets是对等的</li>
<li>&lt;&lt; 符号是doLast的alias，doFirst 和 doLast 可以多次执行调用。他们在开始或结束的 task 动作清单中添加动作。task 执行时，按动作列表的顺序执行的动作。操作符 &lt;&lt; 仅仅是 doLast 的别名。</li>
<li>-q是代表quiet模式，不生成构建编译过程的日志信息</li>
</ul>
<h3 id="其他技巧"><a href="#其他技巧" class="headerlink" title="其他技巧"></a>其他技巧</h3><ul>
<li><p>列出项目中所有的task</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle -<span class="selector-tag">q</span> tasks --all</div></pre></td></tr></table></figure>
</li>
<li><p>在执行时排除一个任务</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle groupGradles -x <span class="keyword">ge</span><span class="symbol">nGradle0</span></div></pre></td></tr></table></figure>
</li>
<li><p>任务名字采用缩写</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gradle <span class="keyword">group</span>Hello 等价于  gradle gH</div><div class="line">gradle <span class="keyword">group</span>Gradle0 等价于 gradle gG0</div></pre></td></tr></table></figure>
</li>
<li><p>常用的命令行选项</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-<span class="selector-tag">b</span> 指定构建脚本名字，某人build<span class="selector-class">.gradle</span></div><div class="line">-<span class="selector-tag">i</span> 执行时候输出详细日志信息</div><div class="line">-<span class="selector-tag">q</span> 减少构建出错时打印的日志信息</div><div class="line">--help 打印出所有可用的命令行选项</div></pre></td></tr></table></figure>
</li>
<li><p>以后台守护进行方式运行gradle</p>
<figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradle groupGradles <span class="comment">--daemon</span></div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Gradle系列一：构建工具简介]]></title>
      <url>http://hzqiuxm.github.io/2016/10/30/gradle001/</url>
      <content type="html"><![CDATA[<p>本章节你讲了解到构建工具的演化史，以及各自的特点<br><a id="more"></a></p>
<h2 id="构建工具简介"><a href="#构建工具简介" class="headerlink" title="构建工具简介"></a>构建工具简介</h2><h3 id="四大组成部分"><a href="#四大组成部分" class="headerlink" title="四大组成部分"></a>四大组成部分</h3><ul>
<li>构建文件<blockquote>
<p>使用脚本语言来表达构建逻辑 最常见的是xml、json格式</p>
</blockquote>
</li>
<li>构建输入输出<blockquote>
<p>输入是指构建任务需要的任务或数据，输出是指构建任务的产出结果</p>
</blockquote>
</li>
<li>构建引擎<blockquote>
<p>用来解析执行构建文件指令或规则的工具</p>
</blockquote>
</li>
<li>依赖管理器<blockquote>
<p>管理构建任务所要依赖的第三方或公共类库 </p>
</blockquote>
</li>
</ul>
<h3 id="蚂蚁式构建-Ant"><a href="#蚂蚁式构建-Ant" class="headerlink" title="蚂蚁式构建 Ant"></a>蚂蚁式构建 Ant</h3><ul>
<li>Apache Ant是一个用Java编写的开源构建工具</li>
<li>构建文件使用XML来表示的，可以在任何环境下使用</li>
<li>不提供依赖管理器，自行管理</li>
<li>结合Ivy可以实现依赖管理器</li>
<li>Ant构建术语<blockquote>
<p>project、target、task</p>
</blockquote>
</li>
<li>没有对如何定义构建的结构强加任何限制，对源码、输出目录、target拥有完全灵活的选择</li>
<li>缺点<blockquote>
<p>XML本身较为臃肿与啰嗦</p>
<pre><code>没有建设项目标准，build文件常常会随着项目开发而变得繁杂重复
无法量化被编译的类或执行的TASK
没有Ivy情况下，Ant很难管理依赖
</code></pre></blockquote>
</li>
</ul>
<h3 id="专家构建-Maven"><a href="#专家构建-Maven" class="headerlink" title="专家构建 Maven"></a>专家构建 Maven</h3><ul>
<li>使用约定优于配置的思想，规定了标准的目录布局</li>
<li>基于生命周期的思想，通过三套生命周期来管理构建过程</li>
<li>构建文件也是使用XML来表示的，可以在任何环境下使用</li>
<li>核心功能可以通过开发定制的插件来扩展，社区插件很丰富</li>
<li>脚本中可以定义外部依赖库，一般会搭建Nexus结合maven中心仓库来管理</li>
<li>缺点<blockquote>
<p>默认的结构和生命周期可能会不适合你的项目<br>  自己定制扩展比较复杂，需要了解Mojos(内部扩展API) </p>
</blockquote>
</li>
</ul>
<h3 id="我们想要的构建"><a href="#我们想要的构建" class="headerlink" title="我们想要的构建"></a>我们想要的构建</h3><ul>
<li>具有表达式、声明式、可维护的构建语言</li>
<li>标准化的项目布局和生命周期，但是具有完全的灵活性和对默认值的完全可配置性</li>
<li>定制逻辑灵活易用</li>
<li>支持构建多个项目组成的项目结构</li>
<li>支持依赖管理</li>
<li>可以很好的和Ant、Maven集成</li>
<li>高效且有良好的扩展性</li>
</ul>
<p><strong>是的它就是Gradle,下一代的构建工具</strong></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[商业世界基础逻辑]]></title>
      <url>http://hzqiuxm.github.io/2016/10/28/liurun002/</url>
      <content type="html"><![CDATA[<h2 id="商业世界基础逻辑"><a href="#商业世界基础逻辑" class="headerlink" title="商业世界基础逻辑"></a>商业世界基础逻辑</h2><h3 id="比电商更先进的零售方式是"><a href="#比电商更先进的零售方式是" class="headerlink" title="比电商更先进的零售方式是?"></a>比电商更先进的零售方式是?</h3><a id="more"></a>
<ul>
<li>概念：流量成本<br>我们每获取一个客户，要为此付出的基本价格<blockquote>
<p>案例：开个鞋店，如果租金是10万，估计的客流量是5000，每个潜在客户的成本就是100000/5000 = 20元</p>
</blockquote>
</li>
<li><p>运用:如何获取低沉本的流量？ 用流量的逻辑统一所有零售方式，并懂得如何计算出每一种流量来源的成本</p>
</li>
<li><p>小结：最优选择<br>通过计算流量成本计算，找到一种最便宜的方式</p>
</li>
</ul>
<h3 id="哪有什么一分钱一分货"><a href="#哪有什么一分钱一分货" class="headerlink" title="哪有什么一分钱一分货"></a>哪有什么一分钱一分货</h3><ul>
<li>概念：定倍率<br>商品零售价格除以商品成本价<blockquote>
<p>案例：100元东西卖500元，定倍率是5  （鞋服行业5-10倍，化妆品20-50倍，更多关注网易的成本控栏目）</p>
</blockquote>
</li>
<li><p>运用<br>1.出版行业，作者只能拿到书价格的10%<br>2.当当网书都打折</p>
</li>
<li><p>小结：如何制定自己产品定倍率<br>1.看你手中的武器，如果是创新，那么大胆提升定倍率；如果是效率，那么砍掉低效环节，降低定倍率，获得颠覆性竞争优势<br>2.它是用来观察每个行业的结构和效率的重要标准和基础逻辑</p>
</li>
</ul>
<h3 id="把货卖的更贵还是卖的更多？"><a href="#把货卖的更贵还是卖的更多？" class="headerlink" title="把货卖的更贵还是卖的更多？"></a>把货卖的更贵还是卖的更多？</h3><ul>
<li><p>概念：价量之秤<br>只要毛利乘上销量大于经营成本，就能赚钱，这么做呢？<br>1.尽量提高每件商品的毛利率<br>2.扩大这个商品的销量</p>
<blockquote>
<p>案例：奢侈品行业，钻石行业都是符合第一条的</p>
</blockquote>
</li>
<li><p>运用：销量行业<br>美国的好市多超市<br>小米充电宝薄利多销</p>
</li>
<li><p>小结：采用哪种策略？<br>1.看产品的性质：情感和不可替代为主–》提高价格<br>2.采用销量模式一定要确认市场是否有足够的容量和消费频次<br>3.采用毛利模式时，考虑支撑产品价格的品牌溢价能否被消费者接受</p>
</li>
</ul>
<h3 id="风险不是你想买，想买就能买"><a href="#风险不是你想买，想买就能买" class="headerlink" title="风险不是你想买，想买就能买"></a>风险不是你想买，想买就能买</h3><ul>
<li>概念：库存搏差价<br>库存风险来获得差价优势<blockquote>
<p>案例：美国西南航空原油期货</p>
</blockquote>
</li>
<li>运用<br>总代生意本质是买卖风险，要在第一天建立一个风险管控机制（根据销量采取不同策略来对冲风险）</li>
</ul>
<ul>
<li>小结：买卖风险<br>风险是可以买卖的，但前提你要有一双风险之眼，能看透别人看不透的风险并制定一套独特的机制来解决这个风险</li>
</ul>
<h3 id="黄牛，商业世界的黑客？"><a href="#黄牛，商业世界的黑客？" class="headerlink" title="黄牛，商业世界的黑客？"></a>黄牛，商业世界的黑客？</h3><ul>
<li>概念：规则之缝<br>商业规则背后的漏洞或缝隙，是商业复杂规则的探伤器，是商业世界的黑客<blockquote>
<p>案例：通过充200话费返200购物券来套取利润，花220（其中200是给客户充值话费）拿下代理权，获得400购物券，购买一个350的物品，以320卖掉.总共花了220，最终赚了100</p>
</blockquote>
</li>
<li><p>运用<br>3个外汇交易市场（套利可能性存在反而导致了它们之间的价格始终是均衡的）</p>
</li>
<li><p>小结：凡有力的地方一定有反作用力<br>只有理解了规则之缝和套利者的生存逻辑，才能更完整的理解这个复杂的商业世界</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建简易指南]]></title>
      <url>http://hzqiuxm.github.io/2016/10/27/hello-world/</url>
      <content type="html"><![CDATA[<p>你离搭建一个个人博客网站还差5分钟，赶紧开始吧……<br><a id="more"></a></p>
<h1 id="Hexo搭建简易指南"><a href="#Hexo搭建简易指南" class="headerlink" title="Hexo搭建简易指南"></a>Hexo搭建简易指南</h1><p>面向对象是程序员们，此教程主要以Windows下安装, Mac和linux安装就更简单了基本是输入安装Hexo的几个命令即可</p>
<h2 id="搭建环境准备"><a href="#搭建环境准备" class="headerlink" title="搭建环境准备"></a>搭建环境准备</h2><h3 id="GIT环境搭建"><a href="#GIT环境搭建" class="headerlink" title="GIT环境搭建"></a>GIT环境搭建</h3><p>建议安装一个git客户端软件(下载不了？因为你没翻墙啊)</p>
<p>点击去下载吧:<a href="https://git-scm.com/downloads/" target="_blank" rel="external">GitBash客户端下载</a></p>
<p>###安装Nodejs环境<br>直接去官网下载一个，无脑下一步就行</p>
<p>点击去下载吧:<a href="https://nodejs.org/en/" target="_blank" rel="external">Nodejs安装下载</a></p>
<h3 id="注册一个GITHUB账号"><a href="#注册一个GITHUB账号" class="headerlink" title="注册一个GITHUB账号"></a>注册一个GITHUB账号</h3><p>这个就不用教了吧，相信作为一个合格的程序员，你早就有了。什么？ 你没有，那你离合格的程序员就差一个GITHUB账号了，还不赶紧戳<a href="https://github.com/join?source=login" target="_blank" rel="external">我去注册</a></p>
<h2 id="开始安装Hexo"><a href="#开始安装Hexo" class="headerlink" title="开始安装Hexo"></a>开始安装Hexo</h2><p>1 安装Hexo命令行环境<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-<span class="keyword">cli</span> -g</div></pre></td></tr></table></figure></p>
<p>2 在本地创建一个目录，用来存放你的博客源码</p>
<p>3 进入新建的目录执行以下命令，进行初始化和安装工作<br><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo init</span></div></pre></td></tr></table></figure></p>
<p>4 接下来生成默认的博客并在本地测试下<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">hexo</span> g  <span class="comment">#生成默认的hello world</span></div><div class="line">hexo s  <span class="comment">#启动本地服务 访问 localhost:4000查看效果</span></div></pre></td></tr></table></figure></p>
<p>5 到这步说明本地已经安装好了，接下来是如何同步到github上用默认的域名访问<br>  在你的github上创建一个新仓库，仓库名格式必须是：{你的用户名}.github.io</p>
<p>6 配置配置文件_config.yml 内容如下（注意空格!）<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">deploy</span>:</div><div class="line">  <span class="attribute">type</span>: git</div><div class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/&#123;你的用户名&#125;/&#123;你的用户名&#125;.github.io.git</span></div><div class="line">  <span class="attribute">branch</span>: master</div></pre></td></tr></table></figure></p>
<p>7 安装一个发布插件并发布<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">install</span> hexo-deployer-git --save  <span class="comment">#安装发布插件</span></div><div class="line"></div><div class="line">hexo deploy <span class="comment">#发布到github</span></div></pre></td></tr></table></figure></p>
<p>8 全部完成，你可以通过github提供的域名进行访问你的博客了！<br>   默认域名地址：{你的用户名}.github.io 当然你还可以绑定到你自己的域名上<br>   请参考教程: <a href="http://www.hzqiuxm.com" target="_blank" rel="external">Github上如何绑定自己的域名</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[消费心理学]]></title>
      <url>http://hzqiuxm.github.io/2016/10/27/liurun001/</url>
      <content type="html"><![CDATA[<h2 id="消费心理学"><a href="#消费心理学" class="headerlink" title="消费心理学"></a>消费心理学</h2><h3 id="让用户从最有钱的那个心理账户花钱"><a href="#让用户从最有钱的那个心理账户花钱" class="headerlink" title="让用户从最有钱的那个心理账户花钱"></a>让用户从最有钱的那个心理账户花钱</h3><a id="more"></a>
<ul>
<li>概念：<strong>心理账户</strong><br>用户的钱都是存在不同的心理账户里的，比如生活开支账户，家庭建设和个人发展账户，休闲娱乐账户等，这些账户又是在一个大账户之下的</li>
</ul>
<blockquote>
<p>案例：<br>在听音乐会途中丢了200块钱，如果你是拿这笔钱充值公交卡的，你可能还会继续观看，如果是拿来买门票的，大多数人就选择不去看了</p>
</blockquote>
<ul>
<li><p>适用场景</p>
<p>  巧克力工厂应该放在用户情感维系账户</p>
<p>  装修公司应该放在用户买房账户里</p>
</li>
<li><p>小结</p>
<p>  改变用户对你商品认知，从不愿意花钱的账户转变到愿意花钱的账户</p>
</li>
</ul>
<h3 id="不要为打翻的牛奶哭泣"><a href="#不要为打翻的牛奶哭泣" class="headerlink" title="不要为打翻的牛奶哭泣"></a>不要为打翻的牛奶哭泣</h3><ul>
<li>概念：<strong>沉没成本</strong><br>也叫作协和效应，人们决定是否做一件事情的时候，不仅看未来的好处还要看过往的投入</li>
</ul>
<blockquote>
<p>案例：<br>英法政府联合投资的超音速客机（协和飞机），虽然成功了但损失巨大</p>
</blockquote>
<ul>
<li><p>适用场景</p>
<p>  1.买衣服讨价还价：反复挑选，试穿，让店员在你身上花费更多的精力，可能会给你带来更多的优惠</p>
<p>  2.跟客户要定金：客户稍微有一点购买欲时，就想办法让用户交付个小额的定金，后续顾客热情消失也更可能买你的商品</p>
<p>  3.举办盛大婚礼：举办婚礼过程中闹别扭了，也不会轻易分手</p>
</li>
<li><p>小结：认识沉没成本<br>清楚的认识到它的好坏，更理性的看待它，将可能做出更理性的商业谈判<br>有目的性制造对方沉没成本有利于提高交易成功率</p>
</li>
</ul>
<h3 id="贵和便宜是相对的"><a href="#贵和便宜是相对的" class="headerlink" title="贵和便宜是相对的"></a>贵和便宜是相对的</h3><ul>
<li>概念：<strong>比例偏见</strong><br>人们更加倾向于考虑比例或者倍率的变化</li>
</ul>
<blockquote>
<p>案例：同一款商品100和60,人们愿意多花10分钟买60的，节省40<br>      同一款商品8000和8050,人们不愿意消耗10分钟，而直接买8050，<br>      反而不愿意节省50</p>
</blockquote>
<ul>
<li><p>适用场景：</p>
<p>  促销的时候，送东西不够吸引人，正确的方式加1元换购比较合适<br>  不同笔记本配置差价低于客户自身升级购买零件的费用更佳</p>
</li>
<li><p>小结</p>
<p>  促销时，价格低的用打折，价格高的用降价</p>
<p>  小商品用换购</p>
<p>  廉价品和一个非常贵的东西一起卖，更容易让消费者感到价值感</p>
</li>
</ul>
<h3 id="得到100元，可以弥补失去100元吗？"><a href="#得到100元，可以弥补失去100元吗？" class="headerlink" title="得到100元，可以弥补失去100元吗？"></a>得到100元，可以弥补失去100元吗？</h3><ul>
<li>概念：<strong>损失规避</strong><br>得到的快乐其实并没有办法缓解失去的痛苦，科学家研究说相差2.5倍</li>
</ul>
<blockquote>
<p>案例：老人付钱给草地上玩耍的孩子钱，从10元开始递减至少1元，最后小孩子们再也不在草地上玩了，因为他们觉得损失了9元钱</p>
</blockquote>
<ul>
<li><p>适用场景</p>
<p>  家具配送应该免费，不配送便宜20元（其实就是配送费）</p>
<p>  买东西的7天无理由退换</p>
<p>  买东西的时候可以以旧换新</p>
</li>
<li><p>小结</p>
<p>  采用以旧换新策略代替打折<br>  用获得表述框架代替损失的表述框架<br>  条件成熟时，可以试着大胆推出无理由退货服务</p>
</li>
</ul>
<h3 id="拉个垫背的显示你便宜"><a href="#拉个垫背的显示你便宜" class="headerlink" title="拉个垫背的显示你便宜"></a>拉个垫背的显示你便宜</h3><ul>
<li>概念：<strong>价格锚点</strong><br>消费者对产品价格并不确定的时候，会采取两种原则来判断产品价格： 避免极端，权衡对比</li>
</ul>
<blockquote>
<p>案例：<br>出差住酒店选择，80/小时或者105/天，一般大家都选后者，还觉得赚到了</p>
</blockquote>
<ul>
<li><p>适用场景</p>
<p>  只有两款产品时，如果你想提高价格较高款销售量，你可以引进一款更贵的产品</p>
<p>  体检产品600元和车子保养做比较，车子难道还不如人吗？</p>
</li>
<li><p>小结，如何引导购买</p>
<p>  避免极端<br>  权衡对比<br>  消费者不是为    商品的成本付费，而是为商品的价值感付费</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[常见负载均衡策略]]></title>
      <url>http://hzqiuxm.github.io/2014/01/13/%E5%B8%B8%E8%A7%81%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/</url>
      <content type="html"><![CDATA[<p>  随着大规模的集群应用越来越普及，大小企业都会采用负载均衡来实现服务器压力分摊。<br>本人初步整理了下，目前在企业中常用的几种负载均衡策略。每种策略有着自己的优缺点，适用的场景也不同，所以在一个企业中，可能存在一种或多种的策略共存情况。<br><a id="more"></a></p>
<h3 id="HTTP重定向负载均衡"><a href="#HTTP重定向负载均衡" class="headerlink" title="HTTP重定向负载均衡"></a>HTTP重定向负载均衡</h3><p>这个是早期用的比较多的一种负载均衡策略，采用的思路是用一台http服务器来接受用户的请求，通过设置的负责均衡算法，返回一个重定向的真实服务器给用户终端，用户终端根据重定向的URL，访问真实的服务器。该种策略的虽然简单，但是目前可能会被搜索引擎判为SEO作弊，降低搜索排名，需要权衡使用。</p>
<p>http重定向策略架构图：</p>
<blockquote>
<p><img src="http://7xsh7v.com2.z0.glb.qiniucdn.com/HTTP%E9%87%8D%E5%AE%9A%E5%90%91_slb.png" alt="此处输入图片的描述"></p>
</blockquote>
<h3 id="DNS域名解析负载均衡"><a href="#DNS域名解析负载均衡" class="headerlink" title="DNS域名解析负载均衡"></a>DNS域名解析负载均衡</h3><p>设计思路是利用DNS服务器，对地址解析的时候，直接根据配置好的规则，返回均衡后的IP地址，该策略设计简单省力，性能也有改善，DNS会自动解析离用户最近的一个服务器地址给用户。但是一般DNS解析是一个多级解析，当某台服务器下线后，DNS未及时更新，可能访问已经失效的服务器。所以在实际应用时一般通过DNS返回的是一组服务器，然后再通过其他负载手段访问组服务器中的某台服务器。</p>
<p>DNS域名解析负载策略架构图：</p>
<blockquote>
<p><img src="http://7xsh7v.com2.z0.glb.qiniucdn.com/DNS_slb.png" alt="此处输入图片的描述"></p>
</blockquote>
<h3 id="反向代理负载均衡策略"><a href="#反向代理负载均衡策略" class="headerlink" title="反向代理负载均衡策略"></a>反向代理负载均衡策略</h3><p>反向代理服务器是处在服务器前端的位置，一般可以扮演安全，缓存，负载的角色。作为负载服务器，它的有点是简单，缺点是每次都经过反向代理服务器中转，它很容易成为系统瓶颈。</p>
<p>反向代理负载均衡策略架构图：</p>
<blockquote>
<p><img src="http://7xsh7v.com2.z0.glb.qiniucdn.com/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86_slb.png" alt="此处输入图片的描述"></p>
</blockquote>
<h3 id="IP负载均衡策略"><a href="#IP负载均衡策略" class="headerlink" title="IP负载均衡策略"></a>IP负载均衡策略</h3><p>设计思路是采用一台网关服务器，设置上服务器的内外网地址，当用户通过外网地址访问的时候，通过负载算法，将其路由到某台内网服务上。<br>由于内部服务器和网关采用过的是内网交互，最后网关返回给用户时候，必须将源地址重新修改为网关服务器的外网地址。该策略比起反向代理，性能上有了改善，但是带宽会成为其瓶颈，如果服务的应用以下载功能为主的话，慎用该策略。</p>
<p>IP负载均衡策略架构图：</p>
<blockquote>
<p><img src="http://7xsh7v.com2.z0.glb.qiniucdn.com/IP_slb.png" alt="此处输入图片的描述"></p>
</blockquote>
<h3 id="数据链路负载均衡策略"><a href="#数据链路负载均衡策略" class="headerlink" title="数据链路负载均衡策略"></a>数据链路负载均衡策略</h3><p>IP负载均衡策略采用的是网关服务器修改IP来解决，那么能不能直接让内部服务器返回给用户呢？当然可以，只要负载均衡器修改MAC地址即可，这种方式就被成为数据链路负责均衡策略。这个就避免修改数据包的源地址，目的地址，与目的服务器直接响应。比如LVS采用的就是该种策略。</p>
<p>数据链路负载均衡策略架构图：</p>
<blockquote>
<p><img src="http://7xsh7v.com2.z0.glb.qiniucdn.com/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF_slb.png" alt="此处输入图片的描述"></p>
</blockquote>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>本文中未提及负载均衡算法，在实际应用中，负载均衡策略与负载均衡算法是结合使用的。在某些简单的应用中，可能直接在代码或配置文件中采用均衡算法来实现负载，</p>
]]></content>
    </entry>
    
  
  
</search>
